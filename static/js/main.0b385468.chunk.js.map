{"version":3,"sources":["components/Bot.tsx","components/Cell.tsx","components/Board.tsx","components/Menu.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Bot","handleClick","turn","cells","lines","bot","i","length","a","b","c","playTurn","botTurnNumber","Math","floor","random","includes","generateNumber","React","useEffect","Cell","props","className","onClick","value","Board","useState","Array","fill","setCells","setTurn","status","setStatus","isEnd","setIsEnd","isWinner","checkEndGame","newCells","slice","changeTurn","endGame","calculateWinner","isDraw","gameStatus","console","log","restartGame","map","isPlayWithBot","to","Menu","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b385468.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface BotInteface {\r\n  handleClick: (e: number) => void | null,\r\n  turn: string,\r\n  lines: Array<Array<number>>,\r\n  cells: Array<string>,\r\n}\r\n\r\nfunction Bot({ handleClick, turn, cells, lines }: BotInteface) {\r\n  function generateNumber(): number {\r\n    let botTurnNumber: number;\r\n    do {\r\n      botTurnNumber = Math.floor(Math.random() * 9);\r\n    } while (cells.includes('') && cells[botTurnNumber]);\r\n    return botTurnNumber;\r\n  }\r\n\r\n  function playTurn(i: number): void {\r\n    handleClick(i);\r\n  }\r\n\r\n  function bot(): void | null {\r\n    if(turn === 'O') {\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (cells[a] && cells[a] === cells[b] && !cells[c]) {\r\n          return handleClick(c);\r\n        }\r\n        if(cells[b] && cells[b] === cells[c] && !cells[a]) {\r\n          return handleClick(a);\r\n        }\r\n        if(cells[a] && cells[a] === cells[c] && !cells[b]) {\r\n          return handleClick(b);\r\n        }\r\n      }\r\n      return playTurn(generateNumber());\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    bot();\r\n    // eslint-disable-next-line\r\n  }, [cells])\r\n\r\n  return (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Bot;","import React from \"react\";\r\n\r\ninterface CellInterface {\r\n  onClick: () => void,\r\n  value: string | null,\r\n}\r\n\r\nfunction Cell(props: CellInterface) {\r\n  return (\r\n    <button className=\"cell\" onClick={props.onClick}>{props.value}</button>\r\n  )\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Bot from './Bot';\r\nimport Cell from './Cell'\r\n\r\ninterface BoardInterface {\r\n  isPlayWithBot: boolean,\r\n}\r\n\r\nfunction Board(props: BoardInterface) {\r\n  const [cells, setCells] = React.useState(Array<string>(9).fill(''))\r\n  const [turn, setTurn] = React.useState<string>('');\r\n  const [status, setStatus] = React.useState('');\r\n  const [isEnd, setIsEnd] = React.useState(false);\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  function handleClick(i: number): void {\r\n    if(cells[i] || isEnd || isWinner()) return;\r\n    checkEndGame();\r\n    const newCells = cells.slice();\r\n    newCells[i] = turn;\r\n    setCells(newCells);\r\n    changeTurn(turn);\r\n  }\r\n\r\n  function changeTurn(turn: string): void {\r\n    if(turn === 'X') return setTurn('O');\r\n    if(turn === 'O') return setTurn('X');\r\n  }\r\n\r\n  function checkEndGame(): void {\r\n    if(isWinner()) return win();\r\n    if(isDraw()) return draw();\r\n    setStatus('Turn: ' + turn);\r\n  }\r\n\r\n  function isWinner(): boolean {\r\n    return calculateWinner() !== '';\r\n  }\r\n\r\n  function win(): void {\r\n    endGame(calculateWinner());\r\n  }\r\n\r\n  function isDraw(): boolean {\r\n    for(let i = 0; i < cells.length; i++) if(!cells[i]) return false;\r\n    return true;\r\n  }\r\n\r\n  function draw(): void {\r\n    endGame('draw');\r\n  }\r\n\r\n  function calculateWinner(): string {\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) return cells[a];\r\n    }\r\n    return '';\r\n  }\r\n\r\n  function endGame(gameStatus: string): void {\r\n    console.log('Game Over!');\r\n    setTurn('');\r\n    setIsEnd(true);\r\n    if(gameStatus === 'draw') return setStatus('Draw!');\r\n    if(gameStatus === 'X' || 'O') return setStatus('Winner: ' + gameStatus);\r\n  }\r\n\r\n  function restartGame(): void {\r\n    setCells(Array(9).fill(''));\r\n    setIsEnd(false);\r\n    setTurn('X');\r\n    setStatus('');\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    checkEndGame();\r\n    // eslint-disable-next-line\r\n  }, [cells]);\r\n\r\n  React.useEffect(() => {\r\n    restartGame();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p className=\"game__status\">{ status }</p>\r\n      <div className=\"board\">\r\n        {\r\n          Array(9).fill('').map((c, i) => {\r\n            return <Cell onClick={() => handleClick(i)} key={i} value={cells[i]} />\r\n          })\r\n        }\r\n      </div>\r\n      { props.isPlayWithBot && <Bot handleClick={handleClick} cells={cells} lines={lines} turn={turn} />}\r\n      <div className=\"board__menu\">\r\n        <div className=\"button__bg\">\r\n          <button className=\"button button_type_reset\" onClick={restartGame}>Reset</button>\r\n        </div>\r\n        <div className=\"button__bg\">\r\n          <Link to=\"/\" className=\"button button_type_menu\">Menu</Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Board;","import { Link } from \"react-router-dom\";\r\n\r\nfunction Menu() {\r\n  return (\r\n    <div className=\"menu\">\r\n      <h1 className=\"menu__heading\">Tic Tac Toe</h1>\r\n      <div className=\"menu__game-mode\"><Link className=\"menu__game-mode-link\" to=\"/single\">1 Player</Link></div>\r\n      <div className=\"menu__game-mode\"><Link className=\"menu__game-mode-link\" to=\"/multi\">2 Players</Link></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport Board from './Board';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Menu from './Menu';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"content\">\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Menu />\r\n          </Route>\r\n          <Route path=\"/single\">\r\n            <div className=\"game\">\r\n              <Board isPlayWithBot={true} />\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/multi\">\r\n            <div className=\"game\">\r\n              <Board isPlayWithBot={false} />\r\n            </div>\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}