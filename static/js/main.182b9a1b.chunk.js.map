{"version":3,"sources":["Bot.tsx","Cell.tsx","Board.tsx","Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Bot","handleClick","turn","cells","lines","bot","i","length","a","b","c","console","log","playTurn","botTurnNumber","Math","floor","random","includes","generateNumber","React","useEffect","Cell","props","className","onClick","value","Board","history","useHistory","useState","Array","fill","setCells","setTurn","status","setStatus","isEnd","setIsEnd","isWinner","checkEndGame","newCells","slice","changeTurn","endGame","calculateWinner","isDraw","gameStatus","restartGame","map","isPlayWithBot","push","Menu","to","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.182b9a1b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface BotInteface {\r\n  handleClick: (e: number) => void | null,\r\n  turn: string,\r\n  lines: Array<Array<number>>,\r\n  cells: Array<string>,\r\n}\r\n\r\nfunction Bot({ handleClick, turn, cells, lines }: BotInteface) {\r\n  function generateNumber(): number {\r\n    let botTurnNumber: number;\r\n    do {\r\n      botTurnNumber = Math.floor(Math.random() * 9);\r\n    } while (cells.includes('') && cells[botTurnNumber] !== '');\r\n    return botTurnNumber;\r\n  }\r\n\r\n  function playTurn(i: number): void {\r\n    console.log('Рандом ' + i);\r\n    handleClick(i);\r\n  }\r\n\r\n  function bot(): void | null {\r\n    if(turn === 'O') {\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (cells[a] && cells[a] === cells[b] && !cells[c]) {\r\n          return handleClick(c);\r\n        }\r\n        if(cells[b] && cells[b] === cells[c] && !cells[a]) {\r\n          return handleClick(a);\r\n        }\r\n        if(cells[a] && cells[a] === cells[c] && !cells[b]) {\r\n          return handleClick(b);\r\n        }\r\n      }\r\n      return playTurn(generateNumber());\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    bot();\r\n    // eslint-disable-next-line\r\n  }, [cells])\r\n\r\n  return (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Bot;","import React from \"react\";\r\n\r\ninterface CellInterface {\r\n  onClick: () => void,\r\n  value: string | null,\r\n}\r\n\r\nfunction Cell(props: CellInterface) {\r\n  return (\r\n    <button className=\"cell\" onClick={props.onClick}>{props.value}</button>\r\n  )\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Bot from './Bot';\r\nimport Cell from './Cell'\r\n\r\ninterface BoardInterface {\r\n  isPlayWithBot: boolean,\r\n}\r\n\r\nfunction Board(props: BoardInterface) {\r\n  let history = useHistory();\r\n  const [cells, setCells] = React.useState(Array<string>(9).fill(''))\r\n  const [turn, setTurn] = React.useState<string>('');\r\n  const [status, setStatus] = React.useState('');\r\n  const [isEnd, setIsEnd] = React.useState(false);\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  function handleClick(i: number): void {\r\n    if(cells[i] || isEnd || isWinner()) {\r\n      return;\r\n    }\r\n    checkEndGame();\r\n    const newCells = cells.slice();\r\n    newCells[i] = turn;\r\n    console.log('Ход', turn, i);\r\n    setCells(newCells);\r\n    changeTurn(turn);\r\n  }\r\n\r\n  function changeTurn(turn: string): void {\r\n    if(turn === 'X') {\r\n      setTurn('O');\r\n    } else if(turn === 'O') {\r\n      setTurn('X')\r\n    }\r\n  }\r\n\r\n  function checkEndGame(): void {\r\n    if(isWinner()) return win();\r\n    if(isDraw()) return draw();\r\n    setStatus('Turn: ' + turn);\r\n  }\r\n\r\n  function isWinner(): boolean {\r\n    return calculateWinner() !== '';\r\n  }\r\n\r\n  function win(): void {\r\n    endGame(calculateWinner());\r\n  }\r\n\r\n  function isDraw(): boolean {\r\n    for(let i = 0; i < cells.length; i++) {\r\n      if(!cells[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function draw(): void {\r\n    endGame('draw');\r\n  }\r\n\r\n  function calculateWinner(): string {\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n        return cells[a];\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  function endGame(gameStatus: string): void {\r\n    console.log('Game Over!');\r\n    setTurn('');\r\n    setIsEnd(true);\r\n    if(gameStatus === 'draw') return setStatus('Draw!');\r\n    if(gameStatus === 'X' || 'O') return setStatus('Winner: ' + gameStatus);\r\n  }\r\n\r\n  function restartGame(): void {\r\n    setCells(Array(9).fill(''));\r\n    setIsEnd(false);\r\n    setTurn('X');\r\n    setStatus('');\r\n  }\r\n\r\n  function goToMenu(): void {\r\n    history.push('/');\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    checkEndGame();\r\n    // eslint-disable-next-line\r\n  }, [cells]);\r\n\r\n  React.useEffect(() => {\r\n    restartGame();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p>{ status }</p>\r\n      <div className=\"board\">\r\n        {\r\n          Array(9).fill('').map((c, i) => {\r\n            return <Cell onClick={() => handleClick(i)} key={i} value={cells[i]} />\r\n          })\r\n        }\r\n      </div>\r\n      { props.isPlayWithBot && <Bot handleClick={handleClick} cells={cells} lines={lines} turn={turn} />}\r\n      <button className=\"reset-button\" onClick={restartGame}>Reset</button>\r\n      <button className=\"menu-button\" onClick={goToMenu}>Menu</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Board;","import { Link } from \"react-router-dom\";\r\n\r\nfunction Menu() {\r\n  return (\r\n    <div className=\"menu\">\r\n      <Link to=\"/single\">1 player</Link>\r\n      <Link to=\"/multi\">2 Players</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport Board from './Board';\nimport { Route, Switch } from 'react-router-dom';\nimport Menu from './Menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"content\">\n        <Switch>\n          <Route path=\"/\" exact>\n            <Menu />\n          </Route>\n          <Route path=\"/single\">\n            <div className=\"game\">\n              <Board isPlayWithBot={true} />\n            </div>\n          </Route>\n          <Route path=\"/multi\">\n            <div className=\"game\">\n              <Board isPlayWithBot={false} />\n            </div>\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}